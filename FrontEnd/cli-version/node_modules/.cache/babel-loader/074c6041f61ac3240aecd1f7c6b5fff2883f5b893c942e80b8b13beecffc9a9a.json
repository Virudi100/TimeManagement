{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = {\n  border: \"1\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"td\", null, \"User\"), /*#__PURE__*/_createElementVNode(\"td\", null, \"Start Time\"), /*#__PURE__*/_createElementVNode(\"td\", null, \"End Time\"), /*#__PURE__*/_createElementVNode(\"td\", null, \"ID\")], -1 /* HOISTED */);\nconst _hoisted_4 = [\"onUpdate:modelValue\"];\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"canvas\", {\n  id: \"myChart\",\n  width: \"400\",\n  height: \"400\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Header = _resolveComponent(\"Header\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Header), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h1\", null, \"Hello \" + _toDisplayString($data.name) + \", Welcome to working time page\", 1 /* TEXT */), _createElementVNode(\"table\", _hoisted_2, [_hoisted_3, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.worktimes, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.data\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.user), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.start + \"h\"), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.end + \"h\"), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.id), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.todos, todo => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: todo.id\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": $event => todo.done = $event\n    }, null, 8 /* PROPS */, _hoisted_4), [[_vModelCheckbox, todo.done]]), _createElementVNode(\"span\", {\n      class: _normalizeClass({\n        done: todo.done\n      })\n    }, _toDisplayString(todo.text), 3 /* TEXT, CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_5])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EAESA,KAAK,EAAC;AAAO;;EAEPC,MAAM,EAAC;AAAG;gCACbC,oBAKK,0BAJDA,oBAAa,YAAT,MAAI,gBACRA,oBAAmB,YAAf,YAAU,gBACdA,oBAAiB,YAAb,UAAQ,gBACZA,oBAAW,YAAP,IAAE;;gCAiBdA,oBAAuD;EAA/CC,EAAE,EAAC,SAAS;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;;;6DAzB5CC,aAAUC,oBACVL,oBAyBM,OAzBNM,UAyBM,GAxBFN,oBAAuD,YAAnD,QAAM,oBAAGO,UAAI,IAAG,gCAA8B,iBAClDP,oBAaQ,SAbRQ,UAaQ,GAZJC,UAKK,qBACLC,oBAKKC,6BALcJ,eAAS,EAAjBK,IAAI;yBAAfF,oBAKK;MAL0BG,GAAG,EAAED,IAAI,CAACE;QACrCd,oBAAwB,6BAAjBY,IAAI,CAACG,IAAI,kBAChBf,oBAA+B,6BAAxBY,IAAI,CAACI,KAAK,wBACjBhB,oBAA6B,6BAAtBY,IAAI,CAACK,GAAG,wBACfjB,oBAAsB,6BAAfY,IAAI,CAACX,EAAE;oCAItBD,oBAKK,gCAJDU,oBAGKC,6BAHcJ,WAAK,EAAbW,IAAI;yBAAfR,oBAGK;MAHsBG,GAAG,EAAEK,IAAI,CAACjB;wBACjCD,oBAA2C;MAApCmB,IAAI,EAAC,UAAU;uCAAUD,IAAI,CAACE,IAAI;4DAATF,IAAI,CAACE,IAAI,KACzCpB,oBAAyD;MAAlDF,KAAK;QAAAsB,MAAUF,IAAI,CAACE;MAAI;wBAAOF,IAAI,CAACG,IAAI;oCAIvDC,UAAuD","names":["class","border","_createElementVNode","id","width","height","_createVNode","_component_Header","_hoisted_1","$data","_hoisted_2","_hoisted_3","_createElementBlock","_Fragment","item","key","data","user","start","end","todo","type","done","text","_hoisted_5"],"sourceRoot":"","sources":["C:\\Users\\Anthony\\Desktop\\TimeManagement\\FrontEnd\\cli-version\\src\\components\\Workingtime.vue"],"sourcesContent":["<template>\r\n    <Header />\r\n    <div class=\"hello\">\r\n        <h1>Hello {{ name }}, Welcome to working time page</h1>\r\n        <table border=\"1\">\r\n            <tr>\r\n                <td>User</td>\r\n                <td>Start Time</td>\r\n                <td>End Time</td>\r\n                <td>ID</td>\r\n            </tr>\r\n            <tr v-for=\"item in worktimes\" :key=\"item.data\">\r\n                <td>{{ item.user }}</td>\r\n                <td>{{ item.start + \"h\" }}</td>\r\n                <td>{{ item.end + \"h\" }}</td>\r\n                <td>{{ item.id }}</td>\r\n            </tr>\r\n        </table>\r\n\r\n        <ul>\r\n            <li v-for=\"todo in todos\" :key=\"todo.id\">\r\n                <input type=\"checkbox\" v-model=\"todo.done\">\r\n                <span :class=\"{ done: todo.done }\">{{ todo.text }}</span>\r\n            </li>\r\n        </ul>\r\n\r\n        <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Header from './Header.vue'\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\nimport { isTSMethodSignature } from '@babel/types';\r\n\r\nlet id = 0\r\nexport default {\r\n    name: 'Workingtime',\r\n    data() {\r\n        return {\r\n            newTodo: '',\r\n            name: '',\r\n            worktimes: [],\r\n            todos: [{ id: id++, text: 'Clock Trigger', done: true }],\r\n        }\r\n    },\r\n    components: {\r\n        Header\r\n    },\r\n\r\n    async mounted() {\r\n        let user = localStorage.getItem('user-info');\r\n        this.name = JSON.parse(user).name;\r\n\r\n        if (!user) {\r\n            this.$router.push({ name: 'SignUp' })\r\n        }\r\n\r\n        let result = await axios.get(\"http://localhost:3000/Workingtimes\");\r\n        console.warn(result)\r\n        this.worktimes = result.data;\r\n\r\n        const ctx = document.getElementById('myChart').getContext('2d');\r\n\r\n        const labels = ['Clock1', 'Clock2', 'Clock3', 'Clock4', 'Clock5', 'Clock6', 'Clock7'];\r\n        const data = {\r\n            labels: labels,\r\n            datasets: [{\r\n                label: 'Start Time',\r\n                data: [42, 59, 80, 81, 56, 55, 40],\r\n                fill: true,\r\n                borderColor: 'rgb(75, 192, 192)',\r\n                tension: 0.1\r\n            }]\r\n        };\r\n\r\n        const myChart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: data,\r\n\r\n        });\r\n\r\n        myChart;\r\n\r\n    }\r\n    \r\n}\r\n</script>\r\n\r\n<style>\r\n.done {\r\n  text-decoration: line-through;}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}